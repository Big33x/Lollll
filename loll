local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/kav"))()

-- Define theme colors
local themeColors = {
    SchemeColor = Color3.fromRGB(0, 0, 255), -- Blue color
    Background = Color3.fromRGB(255, 255, 255), -- White background
    Header = Color3.fromRGB(0, 0, 255), -- Blue header
    TextColor = Color3.fromRGB(0, 0, 0), -- Black text
    ElementColor = Color3.fromRGB(220, 220, 220) -- Light grey elements
}

local Window = Library.CreateLib("FOG", themeColors)

-- Main Tab
local MainTab = Window:NewTab("Main")
local MainSection = MainTab:NewSection("Controls")

-- Main UI Elements
MainSection:NewButton("ButtonText", "ButtonInfo", function()
    print("Clicked")
end)

MainSection:NewToggle("ToggleText", "ToggleInfo", function(state)
    if state then
        print("Toggle On")
    else
        print("Toggle Off")
    end
end)

getgenv().Toggled = false
local toggle = MainSection:NewToggle("Toggle", "Info", function(state)
    getgenv().Toggled = state
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if getgenv().Toggled then
        toggle:UpdateToggle("Toggle On")
    else
        toggle:UpdateToggle("Toggle Off")
    end
end)

MainSection:NewSlider("SliderText", "SliderInfo", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)

MainSection:NewTextBox("TextboxText", "TextboxInfo", function(txt)
    print(txt)
end)

MainSection:NewKeybind("KeybindToggleUI", "Toggle UI", Enum.KeyCode.F, function()
    Library:ToggleUI()
end)

MainSection:NewDropdown("DropdownText", "DropdownInfo", {"Option 1", "Option 2", "Option 3"}, function(currentOption)
    print(currentOption)
end)

local oldList = {
  "2019",
  "2020"
}

local newList = {
  "2021",
  "2022"
}

local dropdown = MainSection:NewDropdown("Dropdown", "Info", oldList, function() end)

MainSection:NewButton("Update Dropdown", "Refreshes Dropdown", function()
    dropdown:Refresh(newList)
end)

MainSection:NewColorPicker("Color Text", "Color Info", Color3.fromRGB(0, 0, 0), function(color)
    print(color)
end)

for theme, color in pairs(themeColors) do
    MainSection:NewColorPicker(theme, "Change your " .. theme, color, function(color3)
        Library:ChangeColor(theme, color3)
    end)
end

-- Aimbot Tab
local AimbotTab = Window:NewTab("Aimbot")
local AimbotSection = AimbotTab:NewSection("Aimbot Controls")

AimbotSection:NewToggle("Enable Aimbot", "Toggle Aimbot On/Off", function(state)
    if state then
        print("Aimbot Enabled")
        -- Add your aimbot code here
    else
        print("Aimbot Disabled")
        -- Add your code to disable aimbot here
    end
end)

AimbotSection:NewSlider("Aimbot Sensitivity", "Adjust Aimbot Sensitivity", 100, 1, function(value)
    print("Aimbot Sensitivity set to " .. value)
end)

AimbotSection:NewDropdown("Aimbot Target", "Choose Aimbot Target", {"Head", "Body", "Legs"}, function(currentOption)
    print("Aimbot Target set to " .. currentOption)
end)

-- ESP Tab
local ESPTab = Window:NewTab("ESP")
local ESPSection = ESPTab:NewSection("ESP Controls")

local espEnabled = false

ESPSection:NewToggle("Enable ESP", "Toggle ESP On/Off", function(state)
    espEnabled = state
    if espEnabled then
        print("ESP Enabled")
        -- Add your ESP code here
        enableESP()
    else
        print("ESP Disabled")
        -- Add your code to disable ESP here
        disableESP()
    end
end)

ESPSection:NewColorPicker("ESP Color", "Choose ESP Color", Color3.fromRGB(0, 255, 0), function(color)
    print("ESP Color set to " .. tostring(color))
end)

local function enableESP()
    local LocalPlayer = cloneref(game:GetService("Players").LocalPlayer)
    local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
    local Workspace = cloneref(game:GetService("Workspace"))
    local Camera = Workspace.CurrentCamera
    local WorldToViewportPoint = Camera.WorldToViewportPoint
    local RunService = cloneref(game:GetService("RunService"))
    local TweenService = cloneref(game:GetService("TweenService"))
    local Coregui = gethui() or cloneref(game:GetService("CoreGui"))
    local gui = Instance.new("ScreenGui", Coregui)

    while not game:IsLoaded() do task.wait() end
    local Classes = {
        ["PlayerClient"] = {},
        ["Character"] = {},
        ["BowClient"] = {},
        ["Camera"] = {},
        ["RangedWeaponClient"] = {},
        ["GetEquippedItem"] = {},
        ["FPS"] = {},
    }

    for _, v in pairs(getgc(true)) do
        if typeof(v) == "function" and islclosure(v) then
            local info = debug.getinfo(v)
            local name = string.match(info.short_src, "%.([%w_]+)$")
            if name and Classes[name] and info.name ~= nil then
                Classes[name][info.name] = info.func
            end
        end
    end
    local Players = debug.getupvalue(Classes.PlayerClient.updatePlayers, 1)
    local cache = {}
    local HasEsp = {}
    drawings.info = playertable
    HasEsp[playertable.model] = drawings
end

local function disableESP()
    -- Add your code to disable ESP here
    -- For example, you can clear ESP drawings or disable certain ESP functionalities
    print("ESP Disabled")
end

-- Misc Tab
local MiscTab = Window:NewTab("Misc")
local MiscSection = MiscTab:NewSection("Misc Controls")

MiscSection:NewButton("Fly", "Enable Flying", function()
    print("Flying Enabled")
    -- Add your fly code here
end)

MiscSection:NewToggle("God Mode", "Toggle God Mode On/Off", function(state)
    if state then
        print("God Mode Enabled")
        -- Add your god mode code here
    else
        print("God Mode Disabled")
        -- Add your code to disable god mode here
    end
end)

MiscSection:NewSlider("Jump Power", "Adjust Jump Power", 300, 50, function(value)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
end)

-- FOV Slider and Toggle
local fovEnabled = false
local defaultFOV = game.Workspace.CurrentCamera.FieldOfView

MiscSection:NewToggle("Enable FOV", "Toggle FOV On/Off", function(state)
    fovEnabled = state
    if not fovEnabled then
        game.Workspace.CurrentCamera.FieldOfView = defaultFOV
    end
end)

MiscSection:NewSlider("FOV", "Adjust Field of View", 120, 70, function(value)
    if fovEnabled then
        game.Workspace.CurrentCamera.FieldOfView = value
    end
end)

-- Button to open and close the UI
local toggleUI = true

local ToggleUIButton = Instance.new("TextButton")
ToggleUIButton.Text = "Toggle UI"
ToggleUIButton.Size = UDim2.new(0, 100, 0, 50)
ToggleUIButton.Position = UDim2.new(0, 10, 0, 10)
ToggleUIButton.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
ToggleUIButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleUIButton.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

ToggleUIButton.MouseButton1Click:Connect(function()
    toggleUI = not toggleUI
    Window:ToggleUI()
    if toggleUI then
        ToggleUIButton.Text = "Close UI"
    else
        ToggleUIButton.Text = "Open UI"
    end
end)

-- Optimize for mobile support
if game:GetService("UserInputService").TouchEnabled then
    local function dragify(Frame)
        local dragToggle = nil
        local dragSpeed = 0.125
        local dragInput = nil
        local dragStart = nil
        local startPos = nil

        local function updateInput(input)
            local delta = input.Position - dragStart
            local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            game:GetService("TweenService"):Create(Frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
        end

        Frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragToggle = true
                dragStart = input.Position
                startPos = Frame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragToggle = false
                    end
                end)
            end
        end)

        Frame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)

        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if input == dragInput and dragToggle then
                updateInput(input)
            end
        end)
    end

    dragify(Window)
end
